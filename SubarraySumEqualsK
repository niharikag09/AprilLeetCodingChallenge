/*
Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:

Input:nums = [1,1,1], k = 2
Output: 2
 

Constraints:

The length of the array is in range [1, 20,000].
The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].
*/

class Solution {
    public int subarraySum(int[] nums, int k) {
        
        int currSum=0;
        HashMap<Integer,Integer> map=new HashMap<>();
        int count=0;

        
        for(int i=0;i<nums.length;i++){
            currSum+=nums[i];
            
            if(currSum==k) count++;
            
            if(map.containsKey(currSum-k)) count+=map.get(currSum-k);
            
            if(!map.containsKey(currSum)) map.put(currSum,0);
             map.put(currSum,map.get(currSum)+1);
        }
        
        return count;
    }
}
